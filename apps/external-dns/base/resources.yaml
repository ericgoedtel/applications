---
# Source: external-dns/crds/dnsendpoint.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: dnsendpoints.externaldns.k8s.io
  annotations:
    api-approved.kubernetes.io: https://github.com/kubernetes-sigs/external-dns/pull/2007
spec:
  group: externaldns.k8s.io
  names:
    kind: DNSEndpoint
    listKind: DNSEndpointList
    plural: dnsendpoints
    singular: dnsendpoint
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: DNSEndpointSpec defines the desired state of DNSEndpoint
              properties:
                endpoints:
                  items:
                    description:
                      Endpoint is a high-level way of a connection between
                      a service and an IP
                    properties:
                      dnsName:
                        description: The hostname of the DNS record
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels stores labels defined for the Endpoint
                        type: object
                      providerSpecific:
                        description: ProviderSpecific stores provider specific config
                        items:
                          description:
                            ProviderSpecificProperty holds the name and value
                            of a configuration which is specific to individual DNS providers
                          properties:
                            name:
                              type: string
                            value:
                              type: string
                          type: object
                        type: array
                      recordTTL:
                        description: TTL for the record
                        format: int64
                        type: integer
                      recordType:
                        description:
                          RecordType type of record, e.g. CNAME, A, AAAA,
                          SRV, TXT etc
                        type: string
                      setIdentifier:
                        description:
                          Identifier to distinguish multiple records with
                          the same name and type (e.g. Route53 records with routing
                          policies other than 'simple')
                        type: string
                      targets:
                        description: The targets the DNS record points to
                        items:
                          type: string
                        type: array
                    type: object
                  type: array
              type: object
            status:
              description: DNSEndpointStatus defines the observed state of DNSEndpoint
              properties:
                observedGeneration:
                  description: The generation observed by the external-dns controller.
                  format: int64
                  type: integer
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}

---
# Source: external-dns/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-external-dns
  namespace: external-dns
  labels:
    helm.sh/chart: external-dns-1.15.0
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken:
---
# Source: external-dns/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-external-dns
  labels:
    helm.sh/chart: external-dns-1.15.0
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list","watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get","watch","list"]
  - apiGroups: [""]
    resources: ["services","endpoints"]
    verbs: ["get","watch","list"]
  - apiGroups: ["extensions","networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get","watch","list"]
---
# Source: external-dns/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-external-dns-viewer
  labels:
    helm.sh/chart: external-dns-1.15.0
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-external-dns
subjects:
  - kind: ServiceAccount
    name: release-name-external-dns
    namespace: external-dns
---
# Source: external-dns/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-external-dns
  namespace: external-dns
  labels:
    helm.sh/chart: external-dns-1.15.0
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: release-name
  ports:
    - name: http
      port: 7979
      targetPort: http
      protocol: TCP
---
# Source: external-dns/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-external-dns
  namespace: external-dns
  labels:
    helm.sh/chart: external-dns-1.15.0
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-dns
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-external-dns
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: external-dns
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: registry.k8s.io/external-dns/external-dns:v0.15.0
          imagePullPolicy: IfNotPresent
          env:
            - name: CF_API_KEY
              valueFrom:
                secretKeyRef:
                  key: password
                  name: cloudflare-api-key
            - name: CF_API_EMAIL
              valueFrom:
                secretKeyRef:
                  key: username
                  name: cloudflare-api-key
          args:
            - --log-level=info
            - --log-format=text
            - --interval=1m
            - --source=service
            - --source=ingress
            - --policy=upsert-only
            - --registry=txt
            - --provider=cloudflare
          ports:
            - name: http
              protocol: TCP
              containerPort: 7979
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
